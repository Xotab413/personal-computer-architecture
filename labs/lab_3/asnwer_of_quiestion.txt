Каждый момент времени центральный процессор может работать только с одним устройством. Циклический опрос каждого устройства с последующей обработкой запроса
оказался неэффективным. Решением задачи оказался контроллер прерываний, который принимает запросы от устройств и, в соответствии с приоритетом, направляет
их к процессору, если прерывание данного устройства не замаскировано(разрешено) в регистре масок. Если прерывание разрешено и устройство его запросило, то 
устанавливается соответствующий устройству бит в регистре запросов.
	Контроллер прерывания состоит из двух микросхем, подключённых каскадно (ведущий и ведомый контроллеры), каждая из которых имеет по 8 линий прерыва-
ний(IRQ0-IRQ7, IRQ8-IRQ15). За каждой линией закреплено определённое устройство.
	Когда процессор получает запрос на прерывание, он сохраняет своё текущее состояние и переключается на выполнение запрошенной операции. При этом ус-
танавливается бит в регистре обслуживания(бит запроса сбрасывается). После обслуживания прерываний сбрасывается бит обслуживания, посылается сигнал EOI
(EndOfInterrupt), процессор переключается на выполняемую ранее задачу.
	Для доступа к контроллеру прерываний используются порты 20h и 21h(для ведущего), А0 и А1h(для ведомого).
	Регистр масок доступен через порт 21h/A1h. Чтобы изменить определённый бит, нужно считать значение из этого регистра, изменить нужный бит, записать
значение обратно.

	1. Команду EOI необходимо указывать, чтобы показать, что мы закончили работу с наиприоритетнейшим прерыванием.

	2. Эти команды используются, чтобы выделить код, который нельзя прервать асинхронными прерываниями. Команда CLI очищает флаг EFLAGS.IF, что означа-
ет, что до точки повторной установки флага микропроцессор прекращает воспринимать и реагировать на запросы поступающие по входу INTR#(внешние маскируемые 
прерывания). Команда STI устанавливает флаг разрешения прерывания, микропроцессор начинает реагировать на запросы по INTR#.

	3. Вектор прерывания является вектором начального состояния прерывающей программы. Содержит всю необходимую информацию для перехода к обработчику, в
том числе его начальный адрес. Каждому типу прерываний соответствует свой вектор прерывания, который инициализирует выполнение соответствующего обработчика.
Обычно векторы прерывания хранятся в специально выделенных фиксированных ячейках памяти с короткими адресами, представляющих собой таблицу векторов прерыва-
ний.

	4. Команда IRET возвращает управление прерванному в результате прерывания процессу. Команда извлекает из стека 3 слова и помещает их в регистры IP,
CS и флагов. Командой IRET должен завершаться любой обработчик прерываний. Команда не воздействует на флаги, однако она загружает в регистр флагов из стека
его исходное содержимое, которое было там сохранено процессором в процессе обслуживания прерывания. 

	5. Вложенное прерывание - это ситуация, когда в процессор поступает высокоприоритетное прерывание, которое должно быть обслужено до завершения обра-
ботки текущего.

	6. Таблица векторов прерываний необходима для того чтобы связать адрес обработчика прерывания с номером прерывания.

	Программируемый контроллер прерываний отвечает за приём запросов прерываний от различных устройств, их хранение в ожидании обработки, выделение наи-
более приоритетного из одновременно присутствующих запросов и выдачу его вектора в процессор, когда последний пожелает обработать прерывание. Слово "програ-
ммируемый" в названии контроллера означает, что режимы его работы устанавливаются программно, а не являются жёстко "зашитыми".
	Традиционная система прерываний ПК включает 16 линий запросов прерываний, из которых одна используется для каскадного соединения контроллеров и поэ-
тому никогда не вызывает. 
	IRQ0 - программируемый интервальный таймер
	IRQ1 - клавиатура
	IRQ2 - запрос прерывания от ведомого контроллера прерываний
	IRQ3 - последовательный порт COM2 и COM4
	IRQ4 - последовательный порт COM1 и COM3
	IRQ5 - параллельный порт LPT2
	IRQ6 - контроллер гибких дисков
	IRQ7 - параллельный порт LPT1
	IRQ8 - часы реального времени
	IRQ9 - произвольное устройство
	IRQ10 - произовольное устройство
	IRQ11 - высокоточный таймер событий
	IRQ12 - мышь
	IRQ13 - ошибка арифметического сопроцессора
	IRQ14 - первый контроллер АТА
	IRQ15 - второй контроллер АТА
	Устройства, способные вырабатывать запросы прерываний, подключаются к компьютеру по шине PCI.
	ОБЩАЯ СХЕМА ОБРАБОТКИ ПРЕРЫВАНИЯ
	Перед началом работы контроллер прерываний должен быть инициализирован посылкой в него группы командных слов инициализации (ICW). Необходимо выдать
ICW и ведущему и ведомому контроллерам. После завершения инициализации контроллеры начинают обрабатывать поступающие запросы прерываний.
	Запросы поступают по 8ми линиям IRQ, причём в зависимости от установленного режима запросом может считаться либо наличие на IRQ высокого уровня, ли-
бо положительный перепад сигнала на этой линии(т.е. переход с низкого уровня в высокий). Обнаруженные запросы запоминаются в регистре запросов прерываний
IRR(Interrupt Request Register). Каждый бит этого регистра соответствует одной линии IRQ. 
	Отдельные линии IRQ могут быть замаскированы с помощью регистра маскирования прерываний - IMR(Interrupt Mask Register).  Установка какого-либо бита 
этого регистра маскирует запросы по соответствующей линии IRQ: они принимаются и фиксируются в IRR обычным образом, но их обработка не выполняется, пока бит
в IMR не будет сброшен. 
	Третьим и последним внутренним регистром контроллера является регистр обслуживаемых прерываний ISR(Interrupt Service Register). Когда контроллер пре-
рываний обрабатывает прерывание и выдаёт процессору его вектор, соответствующий ему бит в ISR устанавливается, а в IRR сбрасывается. Установка некоторого 
разряда ISR в общем случае блокирует обработку новых прерываний, поступающих по той же линии IRQ, а также всех прерываний с меньшим приоритетом. Сброс раз-
рядов ISR выполняется по командам процессора, которыми он уведомляет контроллер прерываний, что обработка того или иного прерывания завершена. Таким образом
IRR показывает какие прерывания ожидают обработки, а ISR - какие обрабатываются в данный момент.
	Контроллер прерываний постоянно анализирует наличие незамаскированных запросов прерываний, т.е. единичных битов IRR, не замаскированных единичными
битами IMR и ISR. Если имеется хотя бы один незамаскированный запрос, контроллер выдаёт сигнал на свой выход запроса прерывания (INTR) и ожидает поступления
сигнала подтверждения прерывания(INTA), получив который, выдаёт вектор наиболее приоритетного из имеющихся незамаскированных запросов, сбрасывает соответст-
вующий ему бит IRR и устанавливает бит ISR, после чего продолжает принимать и обслуживать запросы.
	Так обслуживаются запросы, поступающие по линиям IRQ0, IRQ1, IRQ3-IRQ7. Запросы, поступающие на IRQ8-IRQ15 на входы ведомого контроллера обслужива-
ются им тоже как описано выше, т.е. ведомый контроллер анализирует наличие незамаскированных запросов по этим линиям, и если хотя бы один такой запрос име-
ется, он выдаёт сигнал INTR. Однако этот сигнал поступает не прямо на процессор, а на вход IRQ2 ведущего контроллера. Когда последний обнаруживает, что самый
приоритетный из имеющихся у него запросов поступил по линии IRQ2, т.е. от ведомого контроллера, он, как обычно, передаёт процессору сигнал INTR, однако, ког-
да от процессора приходит сигнал INTA, не выдаёт вектор прерывания сам, а позволяет сделать это ведомому контроллеру, хотя при этом сбрасывает второй разряд
своего регистра IRR и устанавливает тот же разряд регистра ISR, т.е. отмечает тот факт, что запрос прерывания по линии IRQ2 был передан процессору на обра-
ботку. Ведомый контроллер выдаёт вектор, соответствующий наиболее приоритетному из имеющихся у него незамаскированных запросов IRQ8-IRQ15. Таким образом, 
вектор прерывания IRQ2 процессору никогда не выдаётся. 
	ПРИОРИТЕТЫ ПРЕРЫВАНИЙ 
	После инициализации приоритет линий запросов прерываний ведущего контроллера последовательно убывает от IRQ0(наибольший приоритет) до IRQ7(наимень-
ший приоритет), а у ведомого от IRQ8 до IRQ15.    